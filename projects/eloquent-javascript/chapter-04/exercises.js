////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, rate = 1) {
  let arr = [];
    if (start === end) return arr;
  if (start > end && rate < 0){
    while (end <= start){
    arr.push(start);
    start += rate;
    }
  } else
  while (start <= end && rate > 0){
    arr.push(start);
    start += rate;
  } return arr;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  let numberSum = 0;
  for(let index of array){
    numberSum += index;
  } return numberSum;
} 

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  let newArr = [];
  for(let index of array){
    newArr.unshift(index);
  } return newArr;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  let newArr = [];
  for(let index of array){
    newArr.unshift(index);
  }
array.length = 0;
  for (let i of newArr){
    array.push(i);
  }
   return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let list =  null;
  for (let a = array.length - 1; a >= 0; a--){
    list = {value: array[a], rest: list};
  } return list; 
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
   let newArr = [];
   for (let node = list; node; node = node.rest){
     newArr.push(node.value);
   } return newArr;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {
  return {value: value, rest: list};
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, number) {
  if (!list) return undefined;
  if (number === 0) return list.value;
  else return nth(list.rest, number - 1);
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


function deepEqual(a, b){
  if (a === b) return true;
  
  if (typeof a !== "object" || typeof b !== "object") return false;

  let keysA = Object.keys(a);
  let keysB = Object.keys(b);

  if (keysA.length !== keysB.length) return false;

  for (let key of keysA) {
    if (!keysB.includes(key) || !deepEqual(a[key], b[key])) return false;
  }

  return true;
 }


///////////////
function typeOf(whatType){
    if(typeof whatType === "object") { // this through line 55 parses the different data-types that return 'object' when typeof is applied to "whatType" and returns a string of each's type
        if(Array.isArray(whatType)) {
            return 'array';
        } else if(whatType === null) {
            return 'null';
        } else if(whatType instanceof Date) {
            return 'date';
        } else return 'object';
    } else return typeof whatType; // returns a string of the data-type of "whatType"
}

function every(collection, func){
  const returnArr = [];
    if (!func) {
        for(let j of collection){
            if(!j) return false;
            else return true;
        } 
    }
      if(Array.isArray(collection)) {
        for(var i = 0; i < collection.length; i++) {
            returnArr.push(func(collection[i], i, collection));
        }  
     } else {
        for (var key in collection) {
            returnArr.push(func(collection[key], key, collection));
    }
  } if (returnArr.includes(false)) return false;
    else return true;
}
///////////////



////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
